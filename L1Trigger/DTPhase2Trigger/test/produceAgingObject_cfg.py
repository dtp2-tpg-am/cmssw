import FWCore.ParameterSet.Config as cms

process = cms.Process("CREATESQLITE")
process.load("CondCore.CondDB.CondDB_cfi")
process.load('Configuration.StandardSequences.GeometryDB_cff')
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
from Configuration.AlCa.autoCond import autoCond
process.GlobalTag.globaltag = autoCond['run2_design']

process.CondDB.connect = 'sqlite_file:MuonSystemAging.db'

process.source = cms.Source("EmptyIOVSource",
    lastValue = cms.uint64(1),
    timetype = cms.string('runnumber'),
    firstValue = cms.uint64(1),
    interval = cms.uint64(1)
)

process.PoolDBOutputService = cms.Service("PoolDBOutputService",
    process.CondDB,
    timetype = cms.untracked.string('runnumber'),
    toPut = cms.VPSet(cms.PSet(
        record = cms.string('MuonSystemAgingRcd'),
        tag = cms.string('MuonSystemAging_3000fbm1')
    ))
)

process.produceAgingObject = cms.EDAnalyzer("ProduceAgingObject",

            maskedGEMIDs = cms.vint32([
            #671105280,671121664,671105792,671122176,671106304,671122688,671106816,
            #671123200,671107328,671123712,671107840,671124224,671108352,671124736,
            #671105794,671122178,671105282,671121666,671106306,671122690,671106818,
            #671123202,671107330,671123714,671107842,671124226,671108354,671124738,
            #671105056, 671121440, 671105568, 671121952, 671106080, 671122464, 
            #671106592, 671122976, 671107104, 671123488, 671107616, 671124000, 
            #671105058, 671121442, 671105570, 671121954, 671106082, 671122466, 
            #671106594, 671122978, 671107106, 671123490, 671107618, 671124002, 
            ]),

            # GE11MinusIDs
            # cms.vint32([
            # 671105280,671121664,671105792,671122176,671106304,671122688,671106816,
            # 671123200,671107328,671123712,671107840,671124224,671108352,671124736,
            # 671108864,671125248,671109376,671125760,671109888,671126272,671110400,
            # 671126784,671110912,671127296,671111424,671127808,671111936,671128320,
            # 671112448,671128832,671112960,671129344,671113472,671129856,671113984,
            # 671130368,671105024,671121408,671105536,671121920,671106048,671122432,
            # 671106560,671122944,671107072,671123456,671107584,671123968,671108096,
            # 671124480,671108608,671124992,671109120,671125504,671109632,671126016,
            # 671110144,671126528,671110656,671127040,671111168,671127552,671111680,
            # 671128064,671112192,671128576,671112704,671129088,671113216,671129600,
            # 671113728,671130112
            # ]),

            # GE11PlusIDs 
            # cms.vint32([
            # 671105794,671122178,671105282,671121666,671106306,671122690,671106818,
            # 671123202,671107330,671123714,671107842,671124226,671108354,671124738,
            # 671108866,671125250,671109378,671125762,671109890,671126274,671110402,
            # 671126786,671110914,671127298,671111426,671127810,671111938,671128322,
            # 671112450,671128834,671112962,671129346,671113474,671129858,671113986,
            # 671130370,671105026,671121410,671105538,671121922,671106050,671122434,
            # 671106562,671122946,671107074,671123458,671107586,671123970,671108098,
            # 671124482,671108610,671124994,671109122,671125506,671109634,671126018,
            # 671110146,671126530,671110658,671127042,671111170,671127554,671111682,
            # 671128066,671112194,671128578,671112706,671129090,671113218,671129602,
            # 671113730,671130114
            # ]),

            # GE21MinusIDs 
            # cms.vint32([
            # 671105056, 671121440, 671105568, 671121952, 671106080, 671122464, 
            # 671106592, 671122976, 671107104, 671123488, 671107616, 671124000, 
            # 671108128, 671124512, 671108640, 671125024, 671109152, 671125536, 
            # 671105312, 671121696, 671105824, 671122208, 671106336, 671122720, 
            # 671106848, 671123232, 671107360, 671123744, 671107872, 671124256, 
            # 671108384, 671124768, 671108896, 671125280, 671109408, 671125792
            # ]),

            # GE21PlusIDs 
            # cms.vint32([
            # 671105058, 671121442, 671105570, 671121954, 671106082, 671122466, 
            # 671106594, 671122978, 671107106, 671123490, 671107618, 671124002, 
            # 671108130, 671124514, 671108642, 671125026, 671109154, 671125538, 
            # 671105314, 671121698, 671105826, 671122210, 671106338, 671122722, 
            # 671106850, 671123234, 671107362, 671123746, 671107874, 671124258, 
            # 671108386, 671124770, 671108898, 671125282, 671109410, 671125794
            # ]),

            maskedME0IDs = cms.vint32([]),
            
            # Accept lists or regular expression as from:
            # http://www.cplusplus.com/reference/regex/ECMAScript/
            dtRegEx = cms.vstring([
            # A chamber by chamber list in format CHAMBER:EFF
            # Or a RegEx setting efficiency  for all chamber to 10%
            #"(WH-?\\\d_ST\\\d_SEC\\\\d+):0.1"
           "(WH-2_ST1_SEC\\\\d+):0.62",
           "(WH-1_ST1_SEC\\\\d+):0.84",
           "(WH0_ST1_SEC\\\\d+):0.94",
           "(WH1_ST1_SEC\\\\d+):0.85",
           "(WH2_ST1_SEC\\\\d+):0.62",
           "(WH-2_ST2_SEC\\\\d+):0.92",
           "(WH-1_ST2_SEC\\\\d+):0.96",
           "(WH0_ST2_SEC\\\\d+):1.00",
           "(WH1_ST2_SEC\\\\d+):0.96",
           "(WH2_ST2_SEC\\\\d+):0.92",
           "(WH-2_ST3_SEC\\\\d+):0.98",
           "(WH-1_ST3_SEC\\\\d+):0.99",
           "(WH0_ST3_SEC\\\\d+):0.99",
           "(WH1_ST3_SEC\\\\d+):0.99",
           "(WH2_ST3_SEC\\\\d+):0.98",
           "WH-2_ST4_SEC1:0.90",
           "WH-2_ST4_SEC2:0.89",
           "WH-2_ST4_SEC3:0.86",
           "WH-2_ST4_SEC4:0.86",
           "WH-2_ST4_SEC5:0.86",
           "WH-2_ST4_SEC6:0.89",
           "WH-2_ST4_SEC7:0.90",
           "WH-2_ST4_SEC8:0.87",
           "WH-2_ST4_SEC9:0.95",
           "WH-2_ST4_SEC10:0.98",
           "WH-2_ST4_SEC11:0.95",
           "WH-2_ST4_SEC12:0.87",
           "WH-1_ST4_SEC1:0.93",
           "WH-1_ST4_SEC2:0.91",
           "WH-1_ST4_SEC3:0.86",
           "WH-1_ST4_SEC4:0.90",
           "WH-1_ST4_SEC5:0.86",
           "WH-1_ST4_SEC6:0.91",
           "WH-1_ST4_SEC7:0.93",
           "WH-1_ST4_SEC8:0.91",
           "WH-1_ST4_SEC9:0.97",
           "WH-1_ST4_SEC10:0.99",
           "WH-1_ST4_SEC11:0.97",
           "WH-1_ST4_SEC12:0.91",
           "WH0_ST4_SEC1:0.92",
           "WH0_ST4_SEC2:0.89",
           "WH0_ST4_SEC3:0.84",
           "WH0_ST4_SEC4:0.82",
           "WH0_ST4_SEC5:0.84",
           "WH0_ST4_SEC6:0.89",
           "WH0_ST4_SEC7:0.92",
           "WH0_ST4_SEC8:0.93",
           "WH0_ST4_SEC9:0.98",
           "WH0_ST4_SEC10:0.98",
           "WH0_ST4_SEC11:0.98",
           "WH0_ST4_SEC12:0.93",
           "WH1_ST4_SEC1:0.93",
           "WH1_ST4_SEC2:0.91",
           "WH1_ST4_SEC3:0.86",
           "WH1_ST4_SEC4:0.90",
           "WH1_ST4_SEC5:0.86",
           "WH1_ST4_SEC6:0.91",
           "WH1_ST4_SEC7:0.93",
           "WH1_ST4_SEC8:0.91",
           "WH1_ST4_SEC9:0.98",
           "WH1_ST4_SEC10:0.99",
           "WH1_ST4_SEC11:0.98",
           "WH1_ST4_SEC12:0.91",
           "WH2_ST4_SEC1:0.91",
           "WH2_ST4_SEC2:0.88",
           "WH2_ST4_SEC3:0.85",
           "WH2_ST4_SEC4:0.83",
           "WH2_ST4_SEC5:0.85",
           "WH2_ST4_SEC6:0.88",
           "WH2_ST4_SEC7:0.91",
           "WH2_ST4_SEC8:0.88",
           "WH2_ST4_SEC9:0.97",
           "WH2_ST4_SEC10:0.99",
           "WH2_ST4_SEC11:0.97",
           "WH2_ST4_SEC12:0.88",
            ]),
            
            cscRegEx = cms.vstring([
            # # Set 70% type-2 efficiency on ME-1
            # "(ME[-]1/\\\d/\\\\d+):2,0.7",

            # # Set 30% type-1 efficiency on ME- endcap
            # "(-\\\d/\\\d/\\\\d+):1,0.3",

            # type-xy efficiency: x is layer (0 for chamber), 
            # y = 0,1,2 for all digis, strip digis, wire digis
            # Set 0% type-1 efficiency on ME+1/1/10A --> No strip digis
            # "ME\\\+1/4/10:1,0.0",
            # Set 0% type-1 efficiency on ME+1/1/10B --> No strip digis
            #"ME\\\+1/1/10:1,0.0",
            # Set 0% type-0 efficiency on ME+1/2/4 --> No digis
            #"ME\\\+1/2/4:0,0.0",
            # Set 0% type-2 efficiency on ME+1/2/15 --> No wire digis
            #"ME\\\+1/2/15:2,0.0",
            # Set 0% type-31 efficiency on ME+1/2/26 --> No digis on layer 3
            #"ME\\\+1/2/26:30,0.0", 
            # Set 0% type-31 efficiency on ME-1/2/7 --> No strip digis on layer 3
            #"ME\\\-1/2/7:31,0.0",
            # Set 50% type-32 efficiency on ME-1/2/18 --> 50% wire digis on layer 3
            #"ME\\\-1/2/18:32,0.5",
          "ME\\\-1/1/7:10,0.0",
          "ME\\\-1/4/7:10,0.0",
          "ME\\\+1/1/16:40,0.0",
          "ME\\\+1/4/16:40,0.0",
          "ME\\\+1/1/4:60,0.0",
          "ME\\\+1/4/4:60,0.0",
          "ME\\\+1/1/5:60,0.0",
          "ME\\\+1/4/5:60,0.0",
          "ME\\\+1/1/33:50,0.0",
          "ME\\\+1/4/33:50,0.0",
          "ME\\\+1/1/14:60,0.0",
          "ME\\\+1/4/14:60,0.0",
          "ME\\\-1/1/19:40,0.0",
          "ME\\\-1/4/19:40,0.0",
          "ME\\\-1/1/34:50,0.0",
          "ME\\\-1/4/34:50,0.0",
          "ME\\\-1/1/14:40,0.0",
          "ME\\\-1/4/14:40,0.0",
          "ME\\\+1/1/2:10,0.0",
          "ME\\\+1/4/2:10,0.0",
          "ME\\\+1/1/25:20,0.0",
          "ME\\\+1/4/25:20,0.0",
          "ME\\\-1/1/2:10,0.0",
          "ME\\\-1/4/2:10,0.0",
          "ME\\\+1/1/1:50,0.0",
          "ME\\\+1/4/1:50,0.0",
          "ME\\\-1/1/12:10,0.0",
          "ME\\\-1/4/12:10,0.0",
          
          "ME\\\-4/1/2:40,0.0",
          "ME\\\-3/1/16:30,0.0",
          
          "ME\\\-3/2/4:50,0.0",
          "ME\\\-1/2/25:40,0.0",
          "ME\\\-1/3/19:40,0.0",
          
          "ME\\\+1/1/21:0,0.0",
          "ME\\\+1/4/21:0,0.0",
          "ME\\\+1/1/6:0,0.0",
          "ME\\\+1/4/6:0,0.0",
          "ME\\\+1/1/9:0,0.0",
          "ME\\\+1/4/9:0,0.0",
          "ME\\\-1/1/4:0,0.0",
          "ME\\\-1/4/4:0,0.0",
          
          "ME\\\+1/3/23:0,0.0",
          "ME\\\+3/1/16:0,0.0",
          "ME\\\-1/2/27:0,0.0",
          "ME\\\-1/2/31:0,0.0",
          "ME\\\+3/2/3:0,0.0",
          "ME\\\-3/2/28:0,0.0",
          "ME\\\+2/2/26:0,0.0",
          "ME\\\+3/2/31:0,0.0",
          "ME\\\-4/2/9:0,0.0",
          "ME\\\-2/1/6:0,0.0",
          "ME\\\+1/2/21:0,0.0",
          "ME\\\+3/1/9:0,0.0",
          
          "ME\\\-3/1/6:0,0.0",
          "ME\\\-2/2/28:0,0.0",
          "ME\\\+1/2/31:0,0.0",
          "ME\\\+3/1/8:0,0.0",
          "ME\\\-3/1/12:0,0.0",
          "ME\\\-2/2/27:0,0.0",
          "ME\\\+3/1/6:0,0.0",
          "ME\\\+2/1/17:0,0.0",
          "ME\\\-2/2/16:0,0.0",
          "ME\\\+1/2/11:0,0.0",
          "ME\\\-2/2/10:0,0.0",
          "ME\\\-2/2/25:0,0.0",
           ]),

           rpcRegEx = cms.vstring([
           "637583494:0.0", "637616262:0.0", "637649030:0.0", "637575430:0.0", "637608198:0.0", 
           "637640966:0.0", "637567494:0.0", "637600262:0.0", "637633030:0.0", "637583878:0.0", 
           "637616646:0.0", "637649414:0.0", "637588102:0.0", "637620870:0.0", "637653638:0.0", 
           "637579400:0.0", "637612168:0.0", "637644936:0.0", "637571338:0.0", "637604106:0.0", 
           "637636874:0.0", "637567684:0.0", "637600452:0.0", "637633220:0.0", "637567285:0.0", 
           "637600053:0.0", "637632821:0.0", "637567541:0.0", "637600309:0.0", "637633077:0.0", 
           "637568309:0.0", "637601077:0.0", "637633845:0.0", "637570485:0.0", "637636021:0.0", 
           "637567317:0.0", "637632853:0.0", "637567573:0.0", "637633109:0.0", "637568213:0.0", 
           "637633749:0.0", "637568341:0.0", "637633877:0.0", "637567861:0.0", "637633397:0.0", 
           "637571957:0.0", "637637493:0.0", "637569425:0.0", "637634961:0.0", "637570073:0.0", 
           "637635609:0.0", "637567409:0.0", "637600177:0.0", "637632945:0.0", "637567057:0.0", 
           "637632593:0.0", "637567185:0.0", "637632721:0.0", "637567321:0.0", "637632857:0.0", 
           "637571417:0.0", "637636953:0.0", "637567441:0.0", "637632977:0.0", "637571537:0.0", 
           "637637073:0.0", "637567569:0.0", "637633105:0.0", "637567705:0.0", "637633241:0.0", 
           "637572049:0.0", "637637585:0.0", "637568089:0.0", "637633625:0.0", "637568209:0.0", 
           "637633745:0.0", "637568337:0.0", "637633873:0.0", "637572433:0.0", "637637969:0.0", 
           "637572441:0.0", "637637977:0.0", "637568465:0.0", "637634001:0.0", "637568473:0.0", 
           "637634009:0.0", "637572561:0.0", "637638097:0.0", "637572569:0.0", "637638105:0.0", 
           "637567097:0.0", "637632633:0.0", "637571185:0.0", "637636721:0.0", "637567217:0.0", 
           "637632753:0.0", "637567225:0.0", "637632761:0.0", "637571321:0.0", "637636857:0.0", 
           "637567353:0.0", "637632889:0.0", "637571569:0.0", "637637105:0.0", "637571577:0.0", 
           "637637113:0.0", "637575673:0.0", "637641209:0.0", "637579769:0.0", "637645305:0.0", 
           "637571697:0.0", "637637233:0.0", "637571961:0.0", "637637497:0.0", "637567993:0.0", 
           "637633529:0.0", "637572081:0.0", "637637617:0.0", "637568249:0.0", "637633785:0.0", 
           "637572345:0.0", "637637881:0.0", "637568505:0.0", "637634041:0.0", "637572593:0.0", 
           "637638129:0.0", "637567501:0.0", "637633037:0.0", "637568029:0.0", "637633565:0.0", 
           "637569053:0.0", "637634589:0.0", "637569437:0.0", "637634973:0.0", "637569565:0.0", 
           "637635101:0.0", "637570445:0.0", "637635981:0.0", "637567421:0.0", "637632957:0.0", 
           "637567533:0.0", "637633069:0.0", "637568429:0.0", "637633965:0.0", "637570477:0.0", 
           "637603245:0.0", "637636013:0.0", "637567181:0.0", "637632717:0.0", "637571405:0.0", 
           "637636941:0.0", "637567437:0.0", "637632973:0.0", "637571533:0.0", "637637069:0.0", 
           "637571549:0.0", "637637085:0.0", "637567693:0.0", "637633229:0.0", "637571789:0.0", 
           "637637325:0.0", "637571805:0.0", "637637341:0.0", "637571917:0.0", "637637453:0.0", 
           "637567949:0.0", "637633485:0.0", "637572173:0.0", "637637709:0.0", "637572317:0.0", 
           "637637853:0.0", "637572429:0.0", "637637965:0.0", "637568461:0.0", "637633997:0.0", 
           "637568477:0.0", "637634013:0.0", "637567085:0.0", "637632621:0.0", "637567101:0.0", 
           "637632637:0.0", "637571197:0.0", "637636733:0.0", "637567213:0.0", "637632749:0.0", 
           "637571437:0.0", "637636973:0.0", "637571453:0.0", "637636989:0.0", "637571565:0.0", 
           "637637101:0.0", "637575661:0.0", "637641197:0.0", "637567613:0.0", "637633149:0.0", 
           "637571693:0.0", "637637229:0.0", "637567725:0.0", "637633261:0.0", "637571821:0.0", 
           "637637357:0.0", "637571965:0.0", "637637501:0.0", "637567981:0.0", "637633517:0.0", 
           "637568109:0.0", "637633645:0.0", "637572333:0.0", "637637869:0.0", "637568493:0.0", 
           "637634029:0.0"])


)

process.p = cms.Path(process.produceAgingObject)

